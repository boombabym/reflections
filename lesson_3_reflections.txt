When would you want to use a remote repository rather than keeping all your work
local?
    You'd do this if you wanted to share your repository publicly, as in cases where you wanted someone else to help with editing the code/text.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	Other people might have been updating your code on GitHub, so you may only want to pull those changes when your local code is ready to accept them.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
	Forks: a GitHub-initiated clone of a repository owned by someone else into your GitHub space
	Clone: can be initiated either locally by user or on GitHub, copy of existing repository
	Branch: a separate code path distinct from the parent branch (usutally used for testing out major code changes)
	You'd use a Fork when you want to update someone else's code on your own, without affecting that person's code. You'd use a clone for the same reasons as a Fork, but could use a clone to copy your own code. You'd use a branch whenever you want to test out implementing major changes to your own code.

What is the benefit of having a copy of the last known state of the remote
stored locally?
	It lets you easily compare changes made on GitHub to changes made locally and quickly figure out how to handle merges.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
	You'd have to email files back and forth... or put them on SharePoint/OneDrive/Google Drive and coordinate closely with each other to make sure you don't make colliding changes. It would be easier to just make changes this way, but harder to review each other's changes/find errors.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
